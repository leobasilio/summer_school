data Row {
  dec values[]
}

component provides App requires io.File, data.json.JSONEncoder parser, UCB ucb, Profiler profiler, data.IntUtil intUtil, io.Output out {

  int App:main(AppParam params[]){

    File fd = new File("../test_data.txt", File.FILE_ACCESS_READ)
    Row rows[] = parser.jsonToArray(fd.read(fd.getSize()), typeof(Row[]), null)
    String actions[]

    profiler.startTiming("Setting up actions")

    for (int i = 0; i < rows[0].values.arrayLength; i++)
      actions = new String[](actions, new String("a" + i))

    ucb.setActions(actions)

    profiler.stopTiming()

    int duration[] = new int[actions.arrayLength]
    int currentAction = ucb.getAction()
    int currentBlock

    profiler.startTiming("Running action $(intUtil.intToString(currentAction))")

    for (int i = 0; i < rows.arrayLength; i++){

      int a = ucb.getAction()

      /*if(i > 0 && i % 20 == 0){
        out.println("[$(intUtil.intToString(i/20))/50] Time spent on...")
        for (int j = 0 ; j < actions.arrayLength; j++){
          out.println("Action $(intUtil.intToString(j)): $(intUtil.intToString(duration[j]))ms")
          duration[j] = 0
        }
      }*/

      if(a != currentAction){
        profiler.stopTiming()
        duration[currentAction] += profiler.getDuration()
        currentAction = a
        profiler.startTiming("Running action $(intUtil.intToString(currentAction))")
      }

      ucb.consumeData(rows[i].values[a] / 12)

    }

    profiler.stopTiming()
    duration[currentAction] += profiler.getDuration()

    out.println("[50/50] Time spent on...")
    for (int i = 0 ; i < actions.arrayLength; i++){
      out.println("Action $(intUtil.intToString(i)): $(intUtil.intToString(duration[i]))ms")
    }

    return 0

  }

}
